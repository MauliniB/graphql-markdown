enum OrderBy {
  ASCENDING
  DESCENDING
}

# Sort and order results by a specific field and order.
# e.g - { sortBy: "date", orderBy: "DESCENDING" }
input Sort {
  # Field to sort by. e.g - "date"
  sortBy: String!
  # ASCENDING or DESCENDING order. e.g - "DESCENDING"
  orderBy: OrderBy!
}

input Pagination {
  # Sort and order objects by a specific field in a specific order.
  sort: Sort
  # Do not return the first x objects.
  skip: Int
  # Limit the number of objects to return.
  limit: Int
}

input Fields {
  id: ID
  groupId: ID
  html: String
  # field defs below will have been dynamically injected by pkg
  test: String
  order: Int
  temperature: Float
  isContentItem: Boolean
}

type ContentItem {
  id: ID!
  groupId: ID!
  html: String
  # field defs below will have been dynamically injected by pkg
  test: String
  order: Int
  temperature: Float
  isContentItem: Boolean
}

input FilterFields {
  AND: Fields
  OR: [Fields!]
}

type Query {
  contentItemById(id: ID!): ContentItem
  contentItemsByIds(ids: [ID!]!, pagination: Pagination): [ContentItem!]
  contentItemsByGroupId(groupId: ID!, pagination: Pagination): [ContentItem!]
  # Query for contentItems by any field
  contentItems(filter: FilterFields!, pagination: Pagination): [ContentItem!]
}
